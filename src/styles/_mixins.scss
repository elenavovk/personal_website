@use "sass:string";
@use "variables" as vars;

@function cdn-url($path) {
  @return url("#{vars.$store-host}/#{$path}");
}

// Flex
@mixin flex($align-items: center, $justify-content: center, $flex-direction: row) {
  display: flex;
  align-items: $align-items;
  justify-content: $justify-content;
  flex-direction: $flex-direction;
}

//

// Placeholder
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

// Hover
@mixin hover($color, $color2) {
  color: $color;
  transition: color .25s ease;
  &:hover {
    color: $color2;
    cursor: pointer;
  }
}

// Font
@mixin font($font-size, $line-height) {
  font-size: $font-size;
  line-height: $line-height;
}

// Media queries:
$sizes: ("xs": 320px, "sm": 576px, "md": 768px, "lg": 992px, "xl": 1200px, "xxl": 1366px, "full": 1920px);
@function getPreviousSize($currentSize) {
  $keys: map-keys($sizes);
  $index: index($keys, $currentSize)-1;
  $value: map-values($sizes);
  @return nth($value, $index);
}

@mixin media($minmax, $media) {
  @each $size, $resolution in $sizes {
    @if $media == $size {
      @if ($minmax != "within") {
        @media only screen and (#{$minmax}-width: $resolution) {
          @content;
        }
      } @else {
        @if (index(map-keys($sizes), $media) > 1) {
          @media only screen and (min-width: getPreviousSize($media + 1)) and (max-width: $resolution) {
            @content;
          }
        } @else {
          @media only screen and (max-width: $resolution) {
            @content;
          }
        }
      }
    }
  }
}

